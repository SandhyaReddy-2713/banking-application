def COLOR_MAP = [
    'SUCCESS': 'good',
    'FAILURE': 'danger'
    ]
pipeline {
    agent any
    tools {
      maven 'maven3'
        }

    environment {
        SCANNER_HOME = tool 'sonarqube-scanner'
    }
    parameters {
        choice choices:['create','delete'],description:'to create and destroy',name:'demo'
    }
    stages {
        stage('clean workspace') {
            when { expression { return params.demo == 'create' } }
            steps {
                cleanWs ()
            }
        }
        stage('git-clone') {
            when { expression { return params.demo == 'create' } }
            steps {
                git 'https://github.com/SandhyaReddy-2713/banking-application.git'
            }
        }
        stage('compile') {
            when { expression { return params.demo == 'create' } }
            steps {
                sh 'mvn clean install -DskipTests'
            }
        }
        stage('trivy-file-scan') {
            when { expression { return params.demo == 'create' } }
            steps {
                sh 'trivy fs -f json -o files-trivy-scan.json .'
            }
        }
        stage('sonarqube-analysis') {
            when { expression { return params.demo == 'create' } }
            steps {
                withSonarQubeEnv('sonarqube-server') {
               sh ''' $SCANNER_HOME/bin/sonar-scanner -Dsonar.projectName=bank-application \
               -Dsonar.java.binaries=. \
               -Dsonar.projectKey=bank-application'''
              }
            }
        }
        stage('artifactory-nexus') {
            when { expression { return params.demo == 'create' } }
            steps {
                withMaven(
                    globalMavenSettingsConfig: 'maven.settings',openjdk: ",maven:",mavenSettingsConfig:",traceability:true"
                ) {
                    sh 'mvn clean deploy -DskipTests'
                }
            }
        }
        stage('docker-image') {
            when { expression { return params.demo == 'create' } }
            steps {
                sh 'docker build -t sandhyareddy2713/bank-image:${BUILD_NUMBER} .'
            }
        }
        stage('trivy-image-scan') {
            when { expression { return params.demo == 'create' } }
            steps {
                sh 'trivy -f table -o image-scan.html sandhyareddy2713/bank-image:${BUILD_NUMBER} '
            }
        }
        stage('push-dockerhub') {
            when { expression { return params.demo == 'create' } }
            steps {
                script {
                     withDockerRegistry(credentialsId:'dockerhub-credentials', toolName: 'docker') {
                    sh 'docker push sandhyareddy2713/bank-image:${BUILD_NUMBER}'
                  }
                }
            }
        }
        stage('modify manifestfiles') {
            when { expression { return params.demo == 'create' } }
            steps {
                def DOCKER_IMAGE = "sandhyareddy2713/bank-image:${BUILD_NUMBER}"
                def DEPLOYMENT_FILE = "kubernetes/frontend-deployment.yaml"
                sh"""
                sed -i 's | image: sandhyareddy2713/bank-image..* | image: ${DOCKER_IMAGE} | g' ${DEPLOYMENT_FILE}
                """
                withCredentials([string(credentialsId: 'github-cred',variable: 'GITHUB_CRED')]) {
                    sh """
                    git config --global user.name "sandhyareddy"
                    git config --global user.email "sandhyareddy@gmail.com"
                    git add ${DEPLYMENT_FILE}
                    git commit -m "Updated deployment image to ${DOCKER_IMAGE}"
                    git push https://${GITHUB_CRED}@github.com/SandhyaReddy-2713/banking-application.git
                    HEAD:master
                    """
                }
            }
        }


        stage ('install mysql') {
            steps {
                script {
                    sh 'docker run --rm -d --name mysql -e MYSQL_ROOT_PASSWORD=Test@123 -e MYSQL_DATABASE=bankappdb -p 3306:3306 mysql'
                    echo "stage to hold foe 30 sec"
                    sleep time: 30, unit: 'seconds'
                }
            }
        }
        stage ('run-application') {
            steps {
                script {
                    sh 'docker run --rm -itd --name bank-application --link mysql:mysql -p 8085:8080 sandhyareddy2713/bank-image'
                }
            }
        }
        post {
        always {
            echo 'Slack Notification.'
            slackSend channel: '#new-channel',
                      color: COLOR_MAP[currentBuild.currentResult],
                      message: "*${currentBuild.currentResult}:* Job ${env.JOB_NAME} build ${env.BUILD_NUMBER} \n More info at: ${env.BUILD_URL}"

            script {
                emailext(
                    subject: "Jenkins Build Notification - ${currentBuild.fullDisplayName}",
                    body: """
                        <h2>Build Notification</h2>
                        <p>Project: ${JOB_NAME}</p>
                        <p>Build Number: ${BUILD_NUMBER}</p>
                        <p>Status: ${currentBuild.currentResult}</p>
                        <p>View build: <a href="${BUILD_URL}">${BUILD_URL}</a></p>
                    """,
                    to: 'pulakuntasandhyareddy@gmail.com',
                    from: 'jenkins@gmail.com',
                    replyTo: 'jenkins@gmail.com',
                    mimeType: 'text/html'
                )
            }
        }
    }
    }

}
